<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:color="component.color.*" 
	creationComplete="init();" 
	remove="exit()" 
	mouseEnabled="true" 
	mouseChildren="true"
	>
		
	<fx:Metadata>
        [Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script><![CDATA[
		
		import flash.display.DisplayObject;
		import flash.display.DisplayObjectContainer;
		import flash.display.GradientType;
		import flash.display.Sprite;
		import flash.events.Event;
		import flash.events.MouseEvent;
		import flash.geom.ColorTransform;
		import flash.geom.Matrix;
		import flash.ui.ContextMenu;
		import flash.ui.ContextMenuItem;
		import flash.events.ContextMenuEvent;
		import mx.events.ColorPickerEvent;
		import mx.events.SliderEvent;
		import mx.core.FlexGlobals;
		import fxgeditor.parser.style.*;
		import fxgeditor.ui.RemovableDragItem;
		import fxgeditor.parser.model.PersistentData;
		import event.StyleChangeEvent;
		import component.color.gradient.GradientVo;
		import component.color.gradient.GradientManager;

		[Bindable]
		protected var barWidth:Number = 150;
		protected var barHeight:Number = 25;
		
		[Bindable]
		protected var g:IGradient;
		protected var manager:GradientManager;
		protected var _currentIcon:Sprite;
		protected var xOffset:Number = 0;
		protected var gradationScr:Sprite;
		protected var lineScr:Sprite;
		
		public function get gradient():IGradient {
			return g;
		}
		
		public function set gradient(value:IGradient):void 
		{
			if ( g ) exit();
			setGradient( value );
		}
		
		public function init():void 
		{
			if( width ) barWidth = width;
		}
		
		public function exit():void
		{
			if ( !lineScr ) return;
			var numIcons:int = lineScr.numChildren;
			for ( var i:int = 0 ; i < numIcons ; i++ ) 
			{
				var icon:DisplayObject = lineScr.getChildAt(i);
				icon.removeEventListener( MouseEvent.MOUSE_DOWN, onIconSelected );
				//icon.removeEventListener( MouseEvent.DOUBLE_CLICK, onIconDoubleClick );
				lineScr.removeChild( icon );
			}
			gradatinPane.removeChild( lineScr );
			gradatinPane.removeChild( gradationScr );
			gradationScr = null;
			g = null;
		}
		
		private function setGradient( grad:IGradient ):void 
		{
			if ( !grad ) {
				g = new LinearGradient();
				g.newPrimitive();
			}else
				g = grad as IGradient;
			
			if ( !gradationScr ) 
			{
				gradationScr = new Sprite();
				gradatinPane.addChild( gradationScr );
				lineScr = new Sprite();
				gradatinPane.addChild( lineScr );
				gradationScr.x = lineScr.x = xOffset;
				gradatinPane.doubleClickEnabled = gradationScr.doubleClickEnabled = true;
				gradatinPane.addEventListener( MouseEvent.DOUBLE_CLICK, addGradientColor );
			}

			typeRadial.selected = ( g.type == GradientType.RADIAL );
			typeLinear.selected = ( g.type == GradientType.LINEAR );
			
			manager = new GradientManager();
			var colors:Array = g.colors;
			var alphas:Array = g.alphas;
			var ratios:Array = g.ratios;
			var length:Number = colors.length;
			for ( var i:int = 0; i < length ; i++ ) 
			{
				var xpos:Number = barWidth * g.ratios[i] / 255  ;
				var icon:Sprite = createRatioIcon( xpos );
				manager[ icon ] = new GradientVo( i, colors[i], alphas[i], ratios[i] );
			}
			
			currentIcon = icon;
			drawGradation();
			createRightMenu();
		}
		
		private function createRightMenu():void {
			var menu:ContextMenu = new ContextMenu();
			menu.hideBuiltInItems();
			var item1:ContextMenuItem = new ContextMenuItem( resourceManager.getString( 'Panel' , 'DeleteGradient' ) );
			item1.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, menu1Handler );
			menu.customItems = [ item1 ];
			this.contextMenu = menu;
		}
		
		private function drawGradation():void 
		{
			var mat:Matrix = new Matrix();
			mat.createGradientBox( barWidth, barHeight, 0, 0, 0);
			gradationScr.graphics.clear();
			gradationScr.graphics.lineStyle( 1, 0xcccccc, 1 );
			gradationScr.graphics.beginGradientFill( GradientType.LINEAR, manager.getColors(), manager.getAlphas() , manager.getRatios(), mat  );
			gradationScr.graphics.drawRect( 0 , 0, barWidth, barHeight );
			gradationScr.graphics.endFill();
		}
		
		private function addGradientColor( e:MouseEvent ):void 
		{
			var per:Number = e.localX / barWidth * 255;
			var id:uint = manager.getNextId();
			var icon:Sprite = createRatioIcon( e.localX );
			manager[ icon ] =  new GradientVo( id, gradColor.rgbValue, gradAlpha.value, per );
			currentIcon = icon;
			onGradChange();
		}
		
		private function removeGradientColor():void 
		{
			currentIcon.removeEventListener( MouseEvent.MOUSE_DOWN, onIconSelected );
			lineScr.removeChild( currentIcon );
			delete manager[ currentIcon ];
			currentIcon = lineScr.getChildAt(0) as Sprite;
			onGradChange();
		}
		
		private function onGradChange():void
		{
			var id:int = manager[ currentIcon ].id;
			manager[ currentIcon ].offset = currentIcon.x / barWidth * 255;
			drawGradation();
			
			g.colors = manager.getColors();
			g.alphas = manager.getAlphas();
			g.ratios = manager.getRatios();
			
			dispatchEvent( new Event( Event.CHANGE ) );
		}
		
		private function createRatioIcon( px:Number ):Sprite
		{
			var ratioIcon:Sprite = new Sprite();
			ratioIcon.graphics.lineStyle( 5, 0,0 );
			ratioIcon.graphics.beginFill( 0xcccccc, 1 );
			ratioIcon.graphics.drawRect( 0, -barHeight  , 1 , barHeight );
			ratioIcon.graphics.endFill();
			ratioIcon.graphics.lineStyle( 5, 0, 0 );
			ratioIcon.graphics.beginFill( 0xcccccc, 1 );
			ratioIcon.graphics.drawCircle( 0, 0, 4 );
			ratioIcon.graphics.endFill();
			ratioIcon.x = px;
			ratioIcon.y = barHeight;
			ratioIcon.cacheAsBitmap = true;
			ratioIcon.mouseEnabled = true;
			ratioIcon.doubleClickEnabled = true;
			ratioIcon.addEventListener( MouseEvent.MOUSE_DOWN, onIconSelected );
			//ratioIcon.addEventListener( MouseEvent.DOUBLE_CLICK, onIconDoubleClick );
			lineScr.addChild( ratioIcon );
			return ratioIcon;
		}
		
		private function onIconSelected( e:MouseEvent ):void
		{
			currentIcon = e.currentTarget as Sprite;
			gradColor.rgbValue = manager[ currentIcon ].color;
			gradAlpha.value = manager[ currentIcon ].alpha;
			this.stage.addEventListener( MouseEvent.MOUSE_MOVE, onIconEdited );
			this.stage.addEventListener( MouseEvent.MOUSE_UP, onIconReleased );
		}
		/*
		private function onIconDoubleClick( e:MouseEvent ):void
		{
			currentIcon = e.currentTarget as Sprite;
			removeGradientColor();
		}
		*/
		private function onIconEdited( e:MouseEvent ):void 
		{
			if( lineScr.mouseX > 0 && lineScr.mouseX < barWidth )
				currentIcon.x = lineScr.mouseX;
				
			onGradChange();
		}
		
		private function onIconReleased( e:MouseEvent ):void 
		{
			this.stage.removeEventListener( MouseEvent.MOUSE_MOVE, onIconEdited );
			this.stage.removeEventListener( MouseEvent.MOUSE_UP, onIconReleased );
		}
		
		private function onColorChange( e:ColorPickerEvent ):void 
		{
			if ( !currentIcon ) return;
			manager[ currentIcon ].color = e.color;
			onGradChange();
		}
		
		private function onAlphaChange( e:Event ):void 
		{
			if ( !currentIcon ) return;
			manager[ currentIcon ].alpha = e.currentTarget.value;
			onGradChange();
		}
		
		private function onTypeChange( type:String ):void 
		{
			if ( 	( type == "radial" && g.type == GradientType.LINEAR ) ||
					( type == "linear" && g.type == GradientType.RADIAL ) )
				g = g.convert();
				
			onGradChange();
		}

		private function menu1Handler( e:ContextMenuEvent ) :void
		{
			removeGradientColor();
		}
		
		private function get currentIcon():Sprite{ return _currentIcon; }
		private function set currentIcon( c:Sprite ):void
		{
			if ( !c ) return;
			if ( _currentIcon )
				_currentIcon.transform.colorTransform = new ColorTransform();
			
			_currentIcon = c;
			var cTrans:ColorTransform = new ColorTransform();
			cTrans.redOffset = 100;
			currentIcon.transform.colorTransform = cTrans;
			
			gradColor.rgbValue = manager[ currentIcon ].color;
			gradAlpha.value = manager[ currentIcon ].alpha;
		}
		
		
	]]></fx:Script>

	<s:layout>
		<s:VerticalLayout />
	</s:layout>	
	
	<!--<mx:UIComponent id="gradatinPane" width="100%" height="30" />-->
	<s:SpriteVisualElement id="gradatinPane" width="100%" height="30" />
	
	<color:ColorWheelSet id="gradColor" change="onColorChange(event);" />
	<s:Label text="@Resource(key='Opacity', bundle='Panel')" />
	<s:HSlider
			minimum="0"
			maximum="1"
			snapInterval="0.01"
			width="{gradColor.width}"
			change="onAlphaChange(event)"
			id="gradAlpha"
			liveDragging="true"
			value="1"
		/>
	<s:HGroup id="typeSelecter">
		<s:RadioButton id="typeRadial" groupName="GradientTypeGrp" label="@Resource(key='Radial', bundle='Panel')" change="onTypeChange('radial')" />
		<s:RadioButton id="typeLinear" groupName="GradientTypeGrp" label="@Resource(key='Linear', bundle='Panel')" change="onTypeChange('linear')" />
	</s:HGroup>
</s:Group>